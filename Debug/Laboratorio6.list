
Laboratorio6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000390  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00001390  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000388  08000388  00001390  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000388  08000390  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00001388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800038c  0800038c  0000138c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000390  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000390  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY
 12 .debug_line   000000fa  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000076  00000000  00000000  000014ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000055  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000038  00000000  00000000  00001585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  000015c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000092  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000019  00000000  00000000  0000169a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000002c  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000364 	.word	0x08000364

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000364 	.word	0x08000364

08000208 <main>:


main:

	// limpiar la memoria
	MOV R0, #0
 8000208:	f04f 0000 	mov.w	r0, #0

	// 1. Operaciones
	LDR R1, =0xC0
 800020c:	f04f 01c0 	mov.w	r1, #192	@ 0xc0
    LDR R2, =0x1F
 8000210:	f04f 021f 	mov.w	r2, #31

    SUB R3, R1, R2
 8000214:	eba1 0302 	sub.w	r3, r1, r2

    // 2. RSB vs SUB
    RSB R0, R1, R2
 8000218:	ebc1 0002 	rsb	r0, r1, r2

    // 3. limpiar R7 con 0
    LDR R7, =10
 800021c:	f04f 070a 	mov.w	r7, #10
    SUB R7, R7, R7
 8000220:	eba7 0707 	sub.w	r7, r7, r7

    LDR R7, =10
 8000224:	f04f 070a 	mov.w	r7, #10
    MOV R7, #0
 8000228:	f04f 0700 	mov.w	r7, #0

    LDR R7, =10
 800022c:	f04f 070a 	mov.w	r7, #10
    BIC R7, R7, 0xffffffff
 8000230:	f027 37ff 	bic.w	r7, r7, #4294967295

    LDR R7, =10
 8000234:	f04f 070a 	mov.w	r7, #10
    BFC R7, #0, #32
 8000238:	f36f 071f 	bfc	r7, #0, #32

    // 4. complemento a 2 sin sub y otros registro
    LDR R0, =5
 800023c:	f04f 0005 	mov.w	r0, #5
    MVN R0, R0
 8000240:	ea6f 0000 	mvn.w	r0, r0
    ADD R0, R0, 1
 8000244:	f100 0001 	add.w	r0, r0, #1

    // 5. b multiplicacion
    // 01111111110101010101111100001010 = 7FD55F0A
    // 01111111110101010101111100001000 = 7FD55F08
    LDR R1, =0b01111111110101010101111100001010
 8000248:	491d      	ldr	r1, [pc, #116]	@ (80002c0 <loop+0x4>)
    LDR R2, =0b01111111110101010101111100001000
 800024a:	4a1e      	ldr	r2, [pc, #120]	@ (80002c4 <loop+0x8>)
    MUL R3, R1, R2
 800024c:	fb01 f302 	mul.w	r3, r1, r2

    // 6. count down
    // (12*74)*3-(9*12*3)+2+3
    LDR R0, =74
 8000250:	f04f 004a 	mov.w	r0, #74	@ 0x4a
    LDR R1, =3
 8000254:	f04f 0103 	mov.w	r1, #3
    LDR R2, =11
 8000258:	f04f 020b 	mov.w	r2, #11
    LDR R3, =12
 800025c:	f04f 030c 	mov.w	r3, #12
    LDR R4, =9
 8000260:	f04f 0409 	mov.w	r4, #9
    LDR R5, =2
 8000264:	f04f 0502 	mov.w	r5, #2

    MUL R6, R0, R3
 8000268:	fb00 f603 	mul.w	r6, r0, r3
    MUL R6, R6, R1
 800026c:	fb06 f601 	mul.w	r6, r6, r1
    MUL R7, R4, R3
 8000270:	fb04 f703 	mul.w	r7, r4, r3
    MUL R7, R7, R1
 8000274:	fb07 f701 	mul.w	r7, r7, r1
    SUB R8, R6, R7
 8000278:	eba6 0807 	sub.w	r8, r6, r7
    ADD R8, R8, R5
 800027c:	44a8      	add	r8, r5
    ADD R8, R8, R1
 800027e:	4488      	add	r8, r1
    // ((-4)+9-1)
    // +
    // (23*15)
    // +
    // ((-4)-9)
    LDR R0, =1
 8000280:	f04f 0001 	mov.w	r0, #1
    LDR R1, =23
 8000284:	f04f 0117 	mov.w	r1, #23
    LDR R2, =-4
 8000288:	f06f 0203 	mvn.w	r2, #3
    LDR R3, =15
 800028c:	f04f 030f 	mov.w	r3, #15
    LDR R4, =-6
 8000290:	f06f 0405 	mvn.w	r4, #5
    LDR R5, =9
 8000294:	f04f 0509 	mov.w	r5, #9

    // (1-(-6)-(-4)) * 9
    SUB R6, R0, R4
 8000298:	eba0 0604 	sub.w	r6, r0, r4
    SUB R6, R6, R2
 800029c:	eba6 0602 	sub.w	r6, r6, r2
    MUL R6, R6, R5
 80002a0:	fb06 f605 	mul.w	r6, r6, r5


    // (-4)+9-1
    ADD R7, R2, R5
 80002a4:	eb02 0705 	add.w	r7, r2, r5
    SUB R7, R7, R0
 80002a8:	eba7 0700 	sub.w	r7, r7, r0

    // (23*15)
    MUL R8, R1, R3
 80002ac:	fb01 f803 	mul.w	r8, r1, r3

    // ((-4)-9)
    SUB R9, R2, R5
 80002b0:	eba2 0905 	sub.w	r9, r2, r5

    // FINAL
    MUL R10, R6, R7
 80002b4:	fb06 fa07 	mul.w	sl, r6, r7
    ADD R10, R10, R8
 80002b8:	44c2      	add	sl, r8
    ADD R10, R10, R9
 80002ba:	44ca      	add	sl, r9

080002bc <loop>:

loop:
	b end
 80002bc:	f000 b860 	b.w	8000380 <__end_veneer>
    LDR R1, =0b01111111110101010101111100001010
 80002c0:	7fd55f0a 	.word	0x7fd55f0a
    LDR R2, =0b01111111110101010101111100001000
 80002c4:	7fd55f08 	.word	0x7fd55f08

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	@ (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	@ (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	@ (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	@ (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f811 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ff85 	bl	8000208 <main>

080002fe <LoopForever>:

LoopForever:
  b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	4d0d      	ldr	r5, [pc, #52]	@ (8000354 <__libc_init_array+0x38>)
 8000320:	4c0d      	ldr	r4, [pc, #52]	@ (8000358 <__libc_init_array+0x3c>)
 8000322:	1b64      	subs	r4, r4, r5
 8000324:	10a4      	asrs	r4, r4, #2
 8000326:	2600      	movs	r6, #0
 8000328:	42a6      	cmp	r6, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	4d0b      	ldr	r5, [pc, #44]	@ (800035c <__libc_init_array+0x40>)
 800032e:	4c0c      	ldr	r4, [pc, #48]	@ (8000360 <__libc_init_array+0x44>)
 8000330:	f000 f818 	bl	8000364 <_init>
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	10a4      	asrs	r4, r4, #2
 8000338:	2600      	movs	r6, #0
 800033a:	42a6      	cmp	r6, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f855 3b04 	ldr.w	r3, [r5], #4
 8000344:	4798      	blx	r3
 8000346:	3601      	adds	r6, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f855 3b04 	ldr.w	r3, [r5], #4
 800034e:	4798      	blx	r3
 8000350:	3601      	adds	r6, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	08000388 	.word	0x08000388
 8000358:	08000388 	.word	0x08000388
 800035c:	08000388 	.word	0x08000388
 8000360:	0800038c 	.word	0x0800038c

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
 800037c:	0000      	movs	r0, r0
	...

08000380 <__end_veneer>:
 8000380:	f85f f000 	ldr.w	pc, [pc]	@ 8000384 <__end_veneer+0x4>
 8000384:	20000021 	.word	0x20000021
